<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LeeSen的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
<<<<<<< HEAD
  <updated>2017-11-01T05:23:02.668Z</updated>
=======
  <updated>2017-11-10T06:27:54.199Z</updated>
>>>>>>> 2f1fd311977787f92ac55a3232a8f05aaf360636
  <id>http://yoursite.com/</id>
  
  <author>
    <name>LeeSen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git学习笔记</title>
    <link href="http://yoursite.com/2017/11/11/git%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2017/11/11/git用法/</id>
    <published>2017-11-11T05:11:00.000Z</published>
<<<<<<< HEAD
    <updated>2017-11-01T05:23:02.668Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="git删除github远程分支"><a href="#git删除github远程分支" class="headerlink" title="git删除github远程分支"></a>git删除github远程分支</h3><p>git push  [远程主机名] :[远程分支名]<br>例如想删除远程主机 develop 分支，运行下面的命令：</p><pre><code>git push origin :develop注意origin后面有空格</code></pre>]]></content>
=======
    <updated>2017-11-10T06:27:54.199Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="git删除github远程分支"><a href="#git删除github远程分支" class="headerlink" title="git删除github远程分支"></a>git删除github远程分支</h3><p>git push  [远程主机名] :[远程分支名]<br>例如想删除远程主机 develop 分支，运行下面的命令：</p><pre><code>git push origin :develop注意origin后面有空格</code></pre><h3 id="在本地新建一个分支"><a href="#在本地新建一个分支" class="headerlink" title="在本地新建一个分支"></a>在本地新建一个分支</h3><pre><code>git branch Branch1 </code></pre><h3 id="切换到你的新分支"><a href="#切换到你的新分支" class="headerlink" title="切换到你的新分支"></a>切换到你的新分支</h3><pre><code>git checkout Branch1</code></pre><h3 id="添加当前工作目录文件到index"><a href="#添加当前工作目录文件到index" class="headerlink" title="添加当前工作目录文件到index"></a>添加当前工作目录文件到index</h3><pre><code>git add .</code></pre><h3 id="生成一个commit"><a href="#生成一个commit" class="headerlink" title="生成一个commit"></a>生成一个commit</h3><pre><code>git commit -m &quot;some comments&quot;</code></pre><h3 id="将新分支发布在github上"><a href="#将新分支发布在github上" class="headerlink" title="将新分支发布在github上"></a>将新分支发布在github上</h3><pre><code>git push origin Branch1</code></pre><h3 id="在本地删除一个分支"><a href="#在本地删除一个分支" class="headerlink" title="在本地删除一个分支"></a>在本地删除一个分支</h3><pre><code>git branch -d Branch1</code></pre><h3 id="在github远程端删除一个分支"><a href="#在github远程端删除一个分支" class="headerlink" title="在github远程端删除一个分支"></a>在github远程端删除一个分支</h3><pre><code>git push origin :Branch1   (分支名前的冒号代表删除)</code></pre><h3 id="获取最新"><a href="#获取最新" class="headerlink" title="获取最新"></a>获取最新</h3><pre><code>git pull</code></pre>]]></content>
>>>>>>> 2f1fd311977787f92ac55a3232a8f05aaf360636
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;git删除github远程分支&quot;&gt;&lt;a href=&quot;#git删除github远程分支&quot; class=&quot;headerlink&quot; title=&quot;git删除github远
      
    
    </summary>
    
    
      <category term="git命令" scheme="http://yoursite.com/tags/git%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Hello Hexo</title>
<<<<<<< HEAD
    <link href="http://yoursite.com/2017/11/08/hello-world/"/>
    <id>http://yoursite.com/2017/11/08/hello-world/</id>
    <published>2017-11-08T02:40:59.293Z</published>
    <updated>2017-10-26T04:52:56.392Z</updated>
=======
    <link href="http://yoursite.com/2017/11/10/hello-world/"/>
    <id>http://yoursite.com/2017/11/10/hello-world/</id>
    <published>2017-11-10T06:27:54.199Z</published>
    <updated>2017-11-10T06:27:54.200Z</updated>
>>>>>>> 2f1fd311977787f92ac55a3232a8f05aaf360636
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
<<<<<<< HEAD
=======
    <title>echart图表自适应</title>
    <link href="http://yoursite.com/2017/11/09/echart%E5%9B%BE%E8%A1%A8%E8%87%AA%E9%80%82%E5%BA%94/"/>
    <id>http://yoursite.com/2017/11/09/echart图表自适应/</id>
    <published>2017-11-09T09:45:22.000Z</published>
    <updated>2017-11-10T06:27:54.196Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="echarts-html布局"><a href="#echarts-html布局" class="headerlink" title="echarts html布局"></a>echarts html布局</h3><p>图表元素的包裹元素绝对定位，利用百分比的padding-bottom是根据父元素的宽度定义，实现。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">     .charts-wrapper .col-md-6 &#123;</span><br><span class="line">        position:relative;</span><br><span class="line">        padding-bottom:25%;</span><br><span class="line">     &#125;</span><br><span class="line">    .charts-wrapper .col-md-6 .charts-box &#123;</span><br><span class="line">        position:absolute;</span><br><span class="line">        top:0;</span><br><span class="line">        left:0;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height:100%;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">"charts-wrapper"</span>&gt;</span><br><span class="line">    &lt;div class=<span class="string">"row"</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">"col-md-12 charts-box"</span>&gt;</span><br><span class="line">            &lt;div id=<span class="string">"main-1"</span> class=<span class="string">"charts-box"</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">"col-md-6"</span>&gt;</span><br><span class="line">            &lt;div id=<span class="string">"main-2"</span> class=<span class="string">"charts-box"</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">"col-md-6"</span>&gt;</span><br><span class="line">            &lt;div id=<span class="string">"main-3"</span> class=<span class="string">"charts-box"</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="js-代码"><a href="#js-代码" class="headerlink" title="js 代码"></a>js 代码</h3><p>``` bash<br>引入<!--echarts 统计图--></p><p><script src="Content/libs/echarts/echarts-3.0/echarts.js"></script></p><p><script><br>    var main_1 = document.getElementById(‘main-1’);<br>    var main_2 = document.getElementById(‘main-2’);<br>    var main_3 = document.getElementById(‘main-3’);</p><pre><code>var myChart_1 = echarts.init(main_1);var myChart_2 = echarts.init(main_2);var myChart_3 = echarts.init(main_3);// 图标数据var option = {。。。。 略}// 使用刚指定的配置项和数据显示图表。myChart_1.setOption(option_1);myChart_2.setOption(option_2);myChart_3.setOption(option_3);//浏览器大小改变时重置大小 window.addEventListener(&quot;resize&quot;, function () {    myChart_1.resize();    myChart_2.resize();    myChart_3.resize(); })</code></pre><p></script></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这里没用采用动态获取宽、高并赋值的操作实现， 图表的宽高都是设置的100%，继承自父元素的值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;echarts-html布局&quot;&gt;&lt;a href=&quot;#echarts-html布局&quot; class=&quot;headerlink&quot; title=&quot;echarts html布局
      
    
    </summary>
    
    
      <category term="echart自适应" scheme="http://yoursite.com/tags/echart%E8%87%AA%E9%80%82%E5%BA%94/"/>
    
  </entry>
  
  <entry>
>>>>>>> 2f1fd311977787f92ac55a3232a8f05aaf360636
    <title>GitHub Pages + Hexo搭建博客</title>
    <link href="http://yoursite.com/2017/10/25/hexo%E9%83%A8%E7%BD%B2%E6%9E%84%E5%BB%BA/"/>
    <id>http://yoursite.com/2017/10/25/hexo部署构建/</id>
    <published>2017-10-25T03:20:50.000Z</published>
<<<<<<< HEAD
    <updated>2017-11-07T08:27:29.582Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><hr><h1 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a>一、 前言</h1><p>本博文正文部分转自 crazymilk 并且根据度娘的一些资源作了完善和美化！</p><a id="more"></a><blockquote><p>以下正文部分转自 <a href="http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more" target="_blank" rel="external">crazymilk</a>  和 博主的 <a href="https://www.zhihu.com/question/21193762" target="_blank" rel="external">知乎</a></p></blockquote><p>这是一篇使用GitHub Pages和Hexo搭建免费独立博客的总结。<br>如果是小小白，可以先花时间去了解下：</p><ul><li><a href="http://git-scm.com/book/zh/v2" target="_blank" rel="external">Git</a></li><li><a href="https://github.com/" target="_blank" rel="external">GitHub</a></li><li><a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a></li><li><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo</a></li><li><a href="http://www.appinn.com/markdown/#autoescape" target="_blank" rel="external">Markdown</a></li></ul><h1 id="二、-必要配置"><a href="#二、-必要配置" class="headerlink" title="二、 必要配置"></a>二、 必要配置</h1><h2 id="2-1-GitHub-Pages-仓库"><a href="#2-1-GitHub-Pages-仓库" class="headerlink" title="2.1 GitHub Pages 仓库"></a>2.1 GitHub Pages 仓库</h2><h3 id="2-1-1-创建对应仓库"><a href="#2-1-1-创建对应仓库" class="headerlink" title="2.1.1 创建对应仓库"></a>2.1.1 创建对应仓库</h3><p>在自己的GitHub账号下创建一个新的仓库，命名为username.github.io（username是你的账号名)。</p><p>在这里，要知道，GitHub Pages有两种类型：User/Organization Pages 和 Project Pages，而我所使用的是User Pages。</p><p>简单来说，User Pages 与 Project Pages的区别是：</p><ol><li>User Pages 是用来展示用户的，而 Project Pages 是用来展示项目的。</li><li>用于存放 User Pages 的仓库必须使用username.github.io的命名规则，而 Project Pages 则没有特殊的要求。</li><li>User Pages 将使用仓库的 master 分支，而 Project Pages 将使用 gh-pages 分支。</li><li>User Pages 通过 http(s)://username.github.io  进行访问，而 Projects Pages通过 http(s)://username.github.io/projectname 进行访问。</li></ol><h3 id="2-1-2-相关资料"><a href="#2-1-2-相关资料" class="headerlink" title="2.1.2 相关资料"></a>2.1.2 相关资料</h3><ul><li><a href="https://help.github.com/articles/user-organization-and-project-pages/" target="_blank" rel="external">GitHub Pages Basics / User, Organization, and Project Pages</a></li></ul><h2 id="2-2-Git"><a href="#2-2-Git" class="headerlink" title="2.2 Git"></a>2.2 Git</h2><h3 id="2-2-1-安装-Git"><a href="#2-2-1-安装-Git" class="headerlink" title="2.2.1 安装 Git"></a>2.2.1 安装 Git</h3><p>在windows下安装git比较常用的有两种方式：</p><ol><li><a href="http://git-scm.com/download/win" target="_blank" rel="external">Git 官方版本的安装</a></li><li><a href="https://desktop.github.com/" target="_blank" rel="external">GitHub for Windows</a></li></ol><h3 id="2-2-2-配置-Git"><a href="#2-2-2-配置-Git" class="headerlink" title="2.2.2 配置 Git"></a>2.2.2 配置 Git</h3><p>当安装完Git应该做的第一件事情就是设置用户名称和邮件地址。这样做很重要，因为每一个Git的提交都会使用这些信息，并且它会写入你的每一次提交中，不可更改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"username"</span></span><br><span class="line">$ git config --global user.email <span class="string">"username@example.com"</span></span><br></pre></td></tr></table></figure><p>对于user.email，因为在GitHub的commits信息上是可见的，所以如果你不想让人知道你的email，可以Keeping your email address private:</p><ol><li>在GitHub右上方点击你的头像，选择”Settings”；</li><li>在右边的”Personal settings”侧边栏选择”Emails”；</li><li>选择”Keep my email address private”。</li></ol><p>这样，你就可以使用如下格式的email进行配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.email <span class="string">"username@users.noreply.github.com"</span></span><br></pre></td></tr></table></figure><h3 id="2-2-3-相关资料"><a href="#2-2-3-相关资料" class="headerlink" title="2.2.3 相关资料"></a>2.2.3 相关资料</h3><ul><li><a href="http://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git" target="_blank" rel="external">安装 Git</a></li><li><a href="http://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%88%9D%E6%AC%A1%E8%BF%90%E8%A1%8C-Git-%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE" target="_blank" rel="external">配置 Git</a></li><li><a href="https://help.github.com/articles/setting-your-email-in-git/" target="_blank" rel="external">Setting your email in Git</a></li><li><a href="https://help.github.com/articles/keeping-your-email-address-private/" target="_blank" rel="external">Keeping your email address private</a></li></ul><h2 id="2-3-Git-与-GitHub"><a href="#2-3-Git-与-GitHub" class="headerlink" title="2.3 Git 与 GitHub"></a>2.3 Git 与 GitHub</h2><h3 id="2-3-1-git与github的区别"><a href="#2-3-1-git与github的区别" class="headerlink" title="2.3.1 git与github的区别"></a>2.3.1 git与github的区别</h3><p>这里，我们要区分清楚git与github。</p><p>git是一个版本控制的工具，而github有点类似于远程仓库，用于存放用git管理的各种项目。</p><h3 id="2-3-2-与github建立联系"><a href="#2-3-2-与github建立联系" class="headerlink" title="2.3.2 与github建立联系"></a>2.3.2 与github建立联系</h3><p>为了能够在本地使用git管理github上的项目，需要进行一些配置，这里介绍SSH的方法。</p><h4 id="2-3-2-1-检查电脑是否已经有SSH-keys。"><a href="#2-3-2-1-检查电脑是否已经有SSH-keys。" class="headerlink" title="2.3.2.1 检查电脑是否已经有SSH keys。"></a>2.3.2.1 检查电脑是否已经有SSH keys。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls -al ~/.ssh</span><br><span class="line"><span class="comment"># Lists the files in your .ssh directory, if they exist</span></span><br></pre></td></tr></table></figure><p>默认情况下，public keys的文件名是以下的格式之一：id_dsa.pub、id_ecdsa.pub、id_ed25519.pub、id_rsa.pub。因此，如果列出的文件有public和private钥匙对（例如id_ras.pub和id_rsa），证明已存在SSH keys。</p><h4 id="2-3-2-2-如果没有SSH-key，则生成新的SSH-key。"><a href="#2-3-2-2-如果没有SSH-key，则生成新的SSH-key。" class="headerlink" title="2.3.2.2 如果没有SSH key，则生成新的SSH key。"></a>2.3.2.2 如果没有SSH key，则生成新的SSH key。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></span><br><span class="line"><span class="comment"># Creates a new ssh key, using the provided email as a label</span></span><br></pre></td></tr></table></figure><p>之后一路回车即可。</p><h4 id="2-3-2-3-向ssh-agent添加key。"><a href="#2-3-2-3-向ssh-agent添加key。" class="headerlink" title="2.3.2.3 向ssh-agent添加key。"></a>2.3.2.3 向ssh-agent添加key。</h4><p>首先确保ssh-agent可运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># start the ssh-agent in the background</span></span><br><span class="line">$ ssh-agent -s</span><br></pre></td></tr></table></figure></p><p>然后添加SSH key：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p><h4 id="2-3-2-4-在GitHub添加SSH-key。"><a href="#2-3-2-4-在GitHub添加SSH-key。" class="headerlink" title="2.3.2.4 在GitHub添加SSH key。"></a>2.3.2.4 在GitHub添加SSH key。</h4><p>首先，拷贝key：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clip &lt; ~/.ssh/id_rsa.pub</span><br><span class="line"><span class="comment"># Copies the contents of the id_rsa.pub file to your cllipboard</span></span><br></pre></td></tr></table></figure></p><p>然后，在GitHub右上方点击头像，选择”Settings”，在右边的”Personal settings”侧边栏选择”SSH Keys”。接着粘贴key，点击”Add key”按钮。最后，测试链接：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line"><span class="comment"># Attempts to ssh to GitHub</span></span><br></pre></td></tr></table></figure></p><p>如果你看到：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host <span class="string">'github.com (207.97.227.239)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure></p><p>就键入：yes。之后将会看到如下信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You<span class="string">'ve successfully authenticated, but GitHub does not</span></span><br><span class="line"><span class="string">provide shell access.</span></span><br></pre></td></tr></table></figure></p><h3 id="2-3-3-相关资料"><a href="#2-3-3-相关资料" class="headerlink" title="2.3.3 相关资料"></a>2.3.3 相关资料</h3><ul><li><a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="external">Generating SSH keys</a></li></ul><h2 id="2-4-Hexo"><a href="#2-4-Hexo" class="headerlink" title="2.4 Hexo"></a>2.4 Hexo</h2><h3 id="2-4-1-安装Hexo"><a href="#2-4-1-安装Hexo" class="headerlink" title="2.4.1 安装Hexo"></a>2.4.1 安装Hexo</h3><p>安装Hexo相当简单。在安装之前，必须检查电脑中是否已经安装下列应用程序：</p><ul><li><a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a></li><li><a href="http://git-scm.com/" target="_blank" rel="external">Git</a><br>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-4-2-使用Hexo建站"><a href="#2-4-2-使用Hexo建站" class="headerlink" title="2.4.2 使用Hexo建站"></a>2.4.2 使用Hexo建站</h3><p>安装完后，在你喜欢的文件夹内（例如D：\Hexo），点击鼠标右键选择Git bash，输入以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>该命令会在目标文件夹内建立网站所需要的所有文件。接下来是安装依赖包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>这样，我们就已经搭建起本地的Hexo博客了。可以先执行以下命令（在对应文件夹下），然后再浏览器输入localhost:4000查看。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>这个博客只是本地的，别人是浏览不了的，之后需要部署到GitHub上。</p><h3 id="2-4-3-相关资料"><a href="#2-4-3-相关资料" class="headerlink" title="2.4.3 相关资料"></a>2.4.3 相关资料</h3><ul><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo 官方文档</a></li></ul><h2 id="三、一般的搭建方法"><a href="#三、一般的搭建方法" class="headerlink" title="三、一般的搭建方法"></a>三、一般的搭建方法</h2><p>在上面，我们已经配置好了所需的所有东西，也成功地搭建了一个本地Hexo博客。现在，需要使用GitHub Pages搭建一个别人能够访问的Hexo博客了。</p><h3 id="3-1-使用默认theme"><a href="#3-1-使用默认theme" class="headerlink" title="3.1 使用默认theme"></a>3.1 使用默认theme</h3><p>我们继续使用上面的文件夹D:\Hexo（也可以新建一个文件夹重新生成），然后编辑该文件夹下的_config.yml。</p><p>默认生成的_config.yml：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>:</span><br></pre></td></tr></table></figure></p><p>修改后的_config.yml：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: 对应仓库的SSH地址（可以在GitHub对应的仓库中复制）</span><br><span class="line">  branch: 分支（User Pages为master，Project Pages为gh-pages）</span><br></pre></td></tr></table></figure></p><p>为了能够使Hexo部署到GitHub上，需要安装一个插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后，执行下列指令即可完成部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>之后，可以通过在浏览器键入：username.github.io进行浏览，开心吧~</p><h3 id="3-2-其他theme"><a href="#3-2-其他theme" class="headerlink" title="3.2 其他theme"></a>3.2 其他theme</h3><p>如果想要使用其他主题，可以使用git clone将别人的主题拷贝到D:\Hexo\themes下，然后将_config.yml中的theme: landscape改为对应的主题名字。</p><p>详细步骤可以参考网上的指南。</p><h2 id="四、-优化部署与管理"><a href="#四、-优化部署与管理" class="headerlink" title="四、 优化部署与管理"></a>四、 优化部署与管理</h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h3><p>Hexo部署到GitHub上的文件，是.md（你的博文）转化之后的.html（静态网页）。因此，当你重装电脑或者想在不同电脑上修改博客时，就不可能了（除非你自己写html o(^▽^)o ）。</p><p>其实，Hexo生成的网站文件中有.gitignore文件，因此它的本意也是想我们将Hexo生成的网站文件存放到GitHub上进行管理的（而不是用U盘或者云备份啦(╬▔皿▔)凸）。这样，不仅解决了上述的问题，还可以通过git的版本控制追踪你的博文的修改过程，是极赞的。</p><p>但是，如果每一个GitHub Pages都需要创建一个额外的仓库来存放Hexo网站文件，我感觉很麻烦（10个项目需要20个仓库(ˉ▽ˉ；)…）。</p><p>所以，我利用了分支！！！</p><p>简单地说，每个想建立GitHub Pages的仓库，起码有两个分支，一个用来存放Hexo网站的文件，一个用来发布网站。</p><p>下面以我的博客作为例子详细地讲述。</p><h3 id="4-2-我的博客搭建流程"><a href="#4-2-我的博客搭建流程" class="headerlink" title="4.2 我的博客搭建流程"></a>4.2 我的博客搭建流程</h3><ol><li>创建仓库，CrazyMilk.github.io；</li><li>创建两个分支：master 与 hexo；</li><li>设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）；</li><li>使用git clone git@github.com:CrazyMilk/CrazyMilk.github.io.git拷贝仓库；</li><li>在本地CrazyMilk.github.io文件夹下通过Git bash依次执行npm install hexo、hexo init、npm install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo）;</li><li>修改_config.yml中的deploy参数，分支应为master；</li><li>依次执行git add .、git commit -m “…”、git push origin hexo提交网站相关的文件；</li><li>执行hexo generate -d 生成网站并部署到GitHub上 (简化指令：hexo g -d)。</li></ol><p>这样一来，在GitHub上的CrazyMilk.github.io仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。完美( •̀ ω •́ )y！</p><h3 id="4-3-我的博客管理流程"><a href="#4-3-我的博客管理流程" class="headerlink" title="4.3 我的博客管理流程"></a>4.3 我的博客管理流程</h3><h4 id="4-3-1-日常修改"><a href="#4-3-1-日常修改" class="headerlink" title="4.3.1 日常修改"></a>4.3.1 日常修改</h4><p>在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理：</p><ol><li>在分支目录下 CrazyMilk.github.io 文件下 点击鼠标右键选择Git bash （这里注意，之前弯路了好久，不要在hexo下 git bash）；</li><li>依次执行git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub（此时当前分支应为hexo）；</li><li>然后才执行hexo generate -d发布网站到master分支上。</li></ol><p>虽然两个过程顺序调转一般不会有问题，不过逻辑上这样的顺序是绝对没问题的（例如突然死机要重装了，悲催….的情况，调转顺序就有问题了）。</p><h4 id="4-3-2-本地资料丢失"><a href="#4-3-2-本地资料丢失" class="headerlink" title="4.3.2 本地资料丢失"></a>4.3.2 本地资料丢失</h4><p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：</p><ol><li>使用git clone git@github.com:CrazyMilk/CrazyMilk.github.io.git拷贝仓库（默认分支为hexo）；</li><li>在本地新拷贝的CrazyMilk.github.io文件夹下通过Git bash依次执行下列指令：npm install hexo、npm install、npm install hexo-deployer-git（记得，不需要hexo init这条指令）。</li><li>总结：_config.yml，theme/，source/，scaffolds/，package.json，.gitignore，是需要拷贝的。<br>我已经拷贝到 hexo 分支</li></ol><h2 id="五、结尾"><a href="#五、结尾" class="headerlink" title="五、结尾"></a>五、结尾</h2><p>最后附上我的博客 <a href="https://ameibj.github.io" target="_blank" rel="external">https://ameibj.github.io</a></p><h2 id="六、-git-bash-下不能运行-npm-install-xxx-问题"><a href="#六、-git-bash-下不能运行-npm-install-xxx-问题" class="headerlink" title="六、 git bash 下不能运行 npm install xxx 问题"></a>六、 git bash 下不能运行 npm install xxx 问题</h2><p> 查找好久发现 <a href="http://blog.csdn.net/dove88888888/article/details/51281915" target="_blank" rel="external">关于node.js配置 Git Bash中</a> </p><p>首先，安装了node.js后，你的系统变量会自动设置，而用户变量不会，你要在用户变量Path中加上你的node.js路径，比如你安在了f盘的node.js下，就在用户变量的Path中追加F:\node.js(环境变量的追加方法：用；号来分隔每个环境变量，比如这样；F:\node.js) 然后cmd就可以用了，但是你是一个dos命令的新手的话，你可能在git Bash上发现node -v还是not found。这里，必须在你的node,npm安装目录下来运行你的node -v</p><h2 id="七、知乎大神-修改-config-yml"><a href="#七、知乎大神-修改-config-yml" class="headerlink" title="七、知乎大神 修改 _config.yml"></a>七、知乎大神 修改 _config.yml</h2><p> <a href="">下载</a> hexo-deployer-git （0.31）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. <span class="keyword">for</span> npm version under 4</span><br><span class="line">$ npm install git+git@github.com:hexojs/hexo-deployer-git.git --save</span><br><span class="line">2. <span class="keyword">for</span> npm version 5</span><br><span class="line">$ npm install git+ssh://git@github.com:hexojs/hexo-deployer-git.git --save</span><br></pre></td></tr></table></figure></p><p>在项目根目录下的 _config.yml 里面就可以这样配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _config.yaml</span></span><br><span class="line">deploy:</span><br><span class="line">  - <span class="built_in">type</span>: git</span><br><span class="line">    repo: git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git</span><br><span class="line">    branch: master</span><br><span class="line">  - <span class="built_in">type</span>: git</span><br><span class="line">    repo: git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git</span><br><span class="line">    branch: hexo</span><br><span class="line">    extend_dirs: /</span><br><span class="line">    ignore_hidden: <span class="literal">false</span></span><br><span class="line">    ignore_pattern:</span><br><span class="line">        public: .</span><br><span class="line"></span><br><span class="line">来自 张钊</span><br></pre></td></tr></table></figure></p><p>这样，在每次写完博客的时候时候使用 hexo d -g 命令就能将所有其他文件发布到 hexo 分支，换电脑的时候就能通过 git 重新下载下来整个项目，然后本地切换到远端的 hexo 分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master/hexo</span><br></pre></td></tr></table></figure></p><p>就能重新获得所有的源文件，就能重新 hexo d 发布，,对于每一个从 git 下载下来的项目或者主题，最好把每个的 .git 文件夹删掉，否则得通过 submodule 的方式来安装。</p>]]></content>
=======
    <updated>2017-11-10T06:27:54.267Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><hr><h1 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a>一、 前言</h1><p>本博文正文部分转自 crazymilk 并且根据度娘的一些资源作了完善和美化！</p><a id="more"></a><blockquote><p>以下正文部分转自 <a href="http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more" target="_blank" rel="external">crazymilk</a>  和 博主的 <a href="https://www.zhihu.com/question/21193762" target="_blank" rel="external">知乎</a></p></blockquote><p>这是一篇使用GitHub Pages和Hexo搭建免费独立博客的总结。<br>如果是小小白，可以先花时间去了解下：</p><ul><li><a href="http://git-scm.com/book/zh/v2" target="_blank" rel="external">Git</a></li><li><a href="https://github.com/" target="_blank" rel="external">GitHub</a></li><li><a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a></li><li><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo</a></li><li><a href="http://www.appinn.com/markdown/#autoescape" target="_blank" rel="external">Markdown</a></li></ul><h1 id="二、-必要配置"><a href="#二、-必要配置" class="headerlink" title="二、 必要配置"></a>二、 必要配置</h1><h2 id="2-1-GitHub-Pages-仓库"><a href="#2-1-GitHub-Pages-仓库" class="headerlink" title="2.1 GitHub Pages 仓库"></a>2.1 GitHub Pages 仓库</h2><h3 id="2-1-1-创建对应仓库"><a href="#2-1-1-创建对应仓库" class="headerlink" title="2.1.1 创建对应仓库"></a>2.1.1 创建对应仓库</h3><p>在自己的GitHub账号下创建一个新的仓库，命名为username.github.io（username是你的账号名)。</p><p>在这里，要知道，GitHub Pages有两种类型：User/Organization Pages 和 Project Pages，而我所使用的是User Pages。</p><p>简单来说，User Pages 与 Project Pages的区别是：</p><ol><li>User Pages 是用来展示用户的，而 Project Pages 是用来展示项目的。</li><li>用于存放 User Pages 的仓库必须使用username.github.io的命名规则，而 Project Pages 则没有特殊的要求。</li><li>User Pages 将使用仓库的 master 分支，而 Project Pages 将使用 gh-pages 分支。</li><li>User Pages 通过 http(s)://username.github.io  进行访问，而 Projects Pages通过 http(s)://username.github.io/projectname 进行访问。</li></ol><h3 id="2-1-2-相关资料"><a href="#2-1-2-相关资料" class="headerlink" title="2.1.2 相关资料"></a>2.1.2 相关资料</h3><ul><li><a href="https://help.github.com/articles/user-organization-and-project-pages/" target="_blank" rel="external">GitHub Pages Basics / User, Organization, and Project Pages</a></li></ul><h2 id="2-2-Git"><a href="#2-2-Git" class="headerlink" title="2.2 Git"></a>2.2 Git</h2><h3 id="2-2-1-安装-Git"><a href="#2-2-1-安装-Git" class="headerlink" title="2.2.1 安装 Git"></a>2.2.1 安装 Git</h3><p>在windows下安装git比较常用的有两种方式：</p><ol><li><a href="http://git-scm.com/download/win" target="_blank" rel="external">Git 官方版本的安装</a></li><li><a href="https://desktop.github.com/" target="_blank" rel="external">GitHub for Windows</a></li></ol><h3 id="2-2-2-配置-Git"><a href="#2-2-2-配置-Git" class="headerlink" title="2.2.2 配置 Git"></a>2.2.2 配置 Git</h3><p>当安装完Git应该做的第一件事情就是设置用户名称和邮件地址。这样做很重要，因为每一个Git的提交都会使用这些信息，并且它会写入你的每一次提交中，不可更改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"username"</span></span><br><span class="line">$ git config --global user.email <span class="string">"username@example.com"</span></span><br></pre></td></tr></table></figure><p>对于user.email，因为在GitHub的commits信息上是可见的，所以如果你不想让人知道你的email，可以Keeping your email address private:</p><ol><li>在GitHub右上方点击你的头像，选择”Settings”；</li><li>在右边的”Personal settings”侧边栏选择”Emails”；</li><li>选择”Keep my email address private”。</li></ol><p>这样，你就可以使用如下格式的email进行配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.email <span class="string">"username@users.noreply.github.com"</span></span><br></pre></td></tr></table></figure><h3 id="2-2-3-相关资料"><a href="#2-2-3-相关资料" class="headerlink" title="2.2.3 相关资料"></a>2.2.3 相关资料</h3><ul><li><a href="http://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git" target="_blank" rel="external">安装 Git</a></li><li><a href="http://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%88%9D%E6%AC%A1%E8%BF%90%E8%A1%8C-Git-%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE" target="_blank" rel="external">配置 Git</a></li><li><a href="https://help.github.com/articles/setting-your-email-in-git/" target="_blank" rel="external">Setting your email in Git</a></li><li><a href="https://help.github.com/articles/keeping-your-email-address-private/" target="_blank" rel="external">Keeping your email address private</a></li></ul><h2 id="2-3-Git-与-GitHub"><a href="#2-3-Git-与-GitHub" class="headerlink" title="2.3 Git 与 GitHub"></a>2.3 Git 与 GitHub</h2><h3 id="2-3-1-git与github的区别"><a href="#2-3-1-git与github的区别" class="headerlink" title="2.3.1 git与github的区别"></a>2.3.1 git与github的区别</h3><p>这里，我们要区分清楚git与github。</p><p>git是一个版本控制的工具，而github有点类似于远程仓库，用于存放用git管理的各种项目。</p><h3 id="2-3-2-与github建立联系"><a href="#2-3-2-与github建立联系" class="headerlink" title="2.3.2 与github建立联系"></a>2.3.2 与github建立联系</h3><p>为了能够在本地使用git管理github上的项目，需要进行一些配置，这里介绍SSH的方法。</p><h4 id="2-3-2-1-检查电脑是否已经有SSH-keys。"><a href="#2-3-2-1-检查电脑是否已经有SSH-keys。" class="headerlink" title="2.3.2.1 检查电脑是否已经有SSH keys。"></a>2.3.2.1 检查电脑是否已经有SSH keys。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls -al ~/.ssh</span><br><span class="line"><span class="comment"># Lists the files in your .ssh directory, if they exist</span></span><br></pre></td></tr></table></figure><p>默认情况下，public keys的文件名是以下的格式之一：id_dsa.pub、id_ecdsa.pub、id_ed25519.pub、id_rsa.pub。因此，如果列出的文件有public和private钥匙对（例如id_ras.pub和id_rsa），证明已存在SSH keys。</p><h4 id="2-3-2-2-如果没有SSH-key，则生成新的SSH-key。"><a href="#2-3-2-2-如果没有SSH-key，则生成新的SSH-key。" class="headerlink" title="2.3.2.2 如果没有SSH key，则生成新的SSH key。"></a>2.3.2.2 如果没有SSH key，则生成新的SSH key。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></span><br><span class="line"><span class="comment"># Creates a new ssh key, using the provided email as a label</span></span><br></pre></td></tr></table></figure><p>之后一路回车即可。</p><h4 id="2-3-2-3-向ssh-agent添加key。"><a href="#2-3-2-3-向ssh-agent添加key。" class="headerlink" title="2.3.2.3 向ssh-agent添加key。"></a>2.3.2.3 向ssh-agent添加key。</h4><p>首先确保ssh-agent可运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># start the ssh-agent in the background</span></span><br><span class="line">$ ssh-agent -s</span><br></pre></td></tr></table></figure></p><p>然后添加SSH key：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p><h4 id="2-3-2-4-在GitHub添加SSH-key。"><a href="#2-3-2-4-在GitHub添加SSH-key。" class="headerlink" title="2.3.2.4 在GitHub添加SSH key。"></a>2.3.2.4 在GitHub添加SSH key。</h4><p>首先，拷贝key：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clip &lt; ~/.ssh/id_rsa.pub</span><br><span class="line"><span class="comment"># Copies the contents of the id_rsa.pub file to your cllipboard</span></span><br></pre></td></tr></table></figure></p><p>然后，在GitHub右上方点击头像，选择”Settings”，在右边的”Personal settings”侧边栏选择”SSH Keys”。接着粘贴key，点击”Add key”按钮。最后，测试链接：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line"><span class="comment"># Attempts to ssh to GitHub</span></span><br></pre></td></tr></table></figure></p><p>如果你看到：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host <span class="string">'github.com (207.97.227.239)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure></p><p>就键入：yes。之后将会看到如下信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You<span class="string">'ve successfully authenticated, but GitHub does not</span></span><br><span class="line"><span class="string">provide shell access.</span></span><br></pre></td></tr></table></figure></p><h3 id="2-3-3-相关资料"><a href="#2-3-3-相关资料" class="headerlink" title="2.3.3 相关资料"></a>2.3.3 相关资料</h3><ul><li><a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="external">Generating SSH keys</a></li></ul><h2 id="2-4-Hexo"><a href="#2-4-Hexo" class="headerlink" title="2.4 Hexo"></a>2.4 Hexo</h2><h3 id="2-4-1-安装Hexo"><a href="#2-4-1-安装Hexo" class="headerlink" title="2.4.1 安装Hexo"></a>2.4.1 安装Hexo</h3><p>安装Hexo相当简单。在安装之前，必须检查电脑中是否已经安装下列应用程序：</p><ul><li><a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a></li><li><a href="http://git-scm.com/" target="_blank" rel="external">Git</a><br>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-4-2-使用Hexo建站"><a href="#2-4-2-使用Hexo建站" class="headerlink" title="2.4.2 使用Hexo建站"></a>2.4.2 使用Hexo建站</h3><p>安装完后，在你喜欢的文件夹内（例如D：\Hexo），点击鼠标右键选择Git bash，输入以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>该命令会在目标文件夹内建立网站所需要的所有文件。接下来是安装依赖包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>这样，我们就已经搭建起本地的Hexo博客了。可以先执行以下命令（在对应文件夹下），然后再浏览器输入localhost:4000查看。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>这个博客只是本地的，别人是浏览不了的，之后需要部署到GitHub上。</p><h3 id="2-4-3-相关资料"><a href="#2-4-3-相关资料" class="headerlink" title="2.4.3 相关资料"></a>2.4.3 相关资料</h3><ul><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo 官方文档</a></li></ul><h2 id="三、一般的搭建方法"><a href="#三、一般的搭建方法" class="headerlink" title="三、一般的搭建方法"></a>三、一般的搭建方法</h2><p>在上面，我们已经配置好了所需的所有东西，也成功地搭建了一个本地Hexo博客。现在，需要使用GitHub Pages搭建一个别人能够访问的Hexo博客了。</p><h3 id="3-1-使用默认theme"><a href="#3-1-使用默认theme" class="headerlink" title="3.1 使用默认theme"></a>3.1 使用默认theme</h3><p>我们继续使用上面的文件夹D:\Hexo（也可以新建一个文件夹重新生成），然后编辑该文件夹下的_config.yml。</p><p>默认生成的_config.yml：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>:</span><br></pre></td></tr></table></figure></p><p>修改后的_config.yml：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: 对应仓库的SSH地址（可以在GitHub对应的仓库中复制）</span><br><span class="line">  branch: 分支（User Pages为master，Project Pages为gh-pages）</span><br></pre></td></tr></table></figure></p><p>为了能够使Hexo部署到GitHub上，需要安装一个插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后，执行下列指令即可完成部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>之后，可以通过在浏览器键入：username.github.io进行浏览，开心吧~</p><h3 id="3-2-其他theme"><a href="#3-2-其他theme" class="headerlink" title="3.2 其他theme"></a>3.2 其他theme</h3><p>如果想要使用其他主题，可以使用git clone将别人的主题拷贝到D:\Hexo\themes下，然后将_config.yml中的theme: landscape改为对应的主题名字。</p><p>详细步骤可以参考网上的指南。</p><h2 id="四、-优化部署与管理"><a href="#四、-优化部署与管理" class="headerlink" title="四、 优化部署与管理"></a>四、 优化部署与管理</h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h3><p>Hexo部署到GitHub上的文件，是.md（你的博文）转化之后的.html（静态网页）。因此，当你重装电脑或者想在不同电脑上修改博客时，就不可能了（除非你自己写html o(^▽^)o ）。</p><p>其实，Hexo生成的网站文件中有.gitignore文件，因此它的本意也是想我们将Hexo生成的网站文件存放到GitHub上进行管理的（而不是用U盘或者云备份啦(╬▔皿▔)凸）。这样，不仅解决了上述的问题，还可以通过git的版本控制追踪你的博文的修改过程，是极赞的。</p><p>但是，如果每一个GitHub Pages都需要创建一个额外的仓库来存放Hexo网站文件，我感觉很麻烦（10个项目需要20个仓库(ˉ▽ˉ；)…）。</p><p>所以，我利用了分支！！！</p><p>简单地说，每个想建立GitHub Pages的仓库，起码有两个分支，一个用来存放Hexo网站的文件，一个用来发布网站。</p><p>下面以我的博客作为例子详细地讲述。</p><h3 id="4-2-我的博客搭建流程"><a href="#4-2-我的博客搭建流程" class="headerlink" title="4.2 我的博客搭建流程"></a>4.2 我的博客搭建流程</h3><ol><li>创建仓库，ameibj.github.io；</li><li>创建两个分支：master 与 hexo；</li><li>设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）；</li><li>使用git clone git@github.com:ameibj/ameibj.github.io.git拷贝仓库；</li><li>在本地 ameibj.github.io文件夹下通过Git bash依次执行(npm install hexo、hexo init、npm install hexo-deployer-git)npm install （此时当前分支应显示为hexo,因为我把 hexo 依赖写入了package，所以直接npm install即可），然后 在 git clone <a href="https://github.com/litten/hexo-theme-yilia.git" target="_blank" rel="external">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia （目前没找到保存yilia 主题存入package的办法，只能每次重构博客时重新下载）。</li><li>修改_config.yml中的deploy参数，分支应为master；（用我的方法此步可以省略）</li><li>依次执行git add .、git commit -m “…”、git push origin hexo提交网站相关的文件；</li><li>执行hexo generate -d 生成网站并部署到GitHub上 (简化指令：hexo g -d)。</li></ol><p>这样一来，在GitHub上的CrazyMilk.github.io仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。完美( •̀ ω •́ )y！</p><h3 id="4-3-我的博客管理流程"><a href="#4-3-我的博客管理流程" class="headerlink" title="4.3 我的博客管理流程"></a>4.3 我的博客管理流程</h3><h4 id="4-3-1-日常修改"><a href="#4-3-1-日常修改" class="headerlink" title="4.3.1 日常修改"></a>4.3.1 日常修改</h4><p>在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理：</p><ol><li>在分支目录下 CrazyMilk.github.io 文件下 点击鼠标右键选择Git bash （这里注意，之前弯路了好久，不要在hexo下 git bash）；</li><li>依次执行git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub（此时当前分支应为hexo）；</li><li>然后才执行hexo generate -d发布网站到master分支上。</li></ol><p>虽然两个过程顺序调转一般不会有问题，不过逻辑上这样的顺序是绝对没问题的（例如突然死机要重装了，悲催….的情况，调转顺序就有问题了）。</p><h4 id="4-3-2-本地资料丢失"><a href="#4-3-2-本地资料丢失" class="headerlink" title="4.3.2 本地资料丢失"></a>4.3.2 本地资料丢失</h4><p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：</p><ol><li>使用git clone git@github.com:CrazyMilk/CrazyMilk.github.io.git拷贝仓库（默认分支为hexo）；</li><li>在本地新拷贝的CrazyMilk.github.io文件夹下通过Git bash依次执行下列指令：npm install hexo、npm install、npm install hexo-deployer-git（记得，不需要hexo init这条指令）。</li><li>总结：_config.yml，theme/，source/，scaffolds/，package.json，.gitignore，是需要拷贝的。<br>我已经拷贝到 hexo 分支</li></ol><h2 id="五、结尾"><a href="#五、结尾" class="headerlink" title="五、结尾"></a>五、结尾</h2><p>最后附上我的博客 <a href="https://ameibj.github.io" target="_blank" rel="external">https://ameibj.github.io</a></p><h2 id="六、-git-bash-下不能运行-npm-install-xxx-问题"><a href="#六、-git-bash-下不能运行-npm-install-xxx-问题" class="headerlink" title="六、 git bash 下不能运行 npm install xxx 问题"></a>六、 git bash 下不能运行 npm install xxx 问题</h2><p> 查找好久发现 <a href="http://blog.csdn.net/dove88888888/article/details/51281915" target="_blank" rel="external">关于node.js配置 Git Bash中</a> </p><p>首先，安装了node.js后，你的系统变量会自动设置，而用户变量不会，你要在用户变量Path中加上你的node.js路径，比如你安在了f盘的node.js下，就在用户变量的Path中追加F:\node.js(环境变量的追加方法：用；号来分隔每个环境变量，比如这样；F:\node.js) 然后cmd就可以用了，但是你是一个dos命令的新手的话，你可能在git Bash上发现node -v还是not found。这里，必须在你的node,npm安装目录下来运行你的node -v</p><h2 id="七、知乎大神-修改-config-yml"><a href="#七、知乎大神-修改-config-yml" class="headerlink" title="七、知乎大神 修改 _config.yml"></a>七、知乎大神 修改 _config.yml</h2><p> <a href="">下载</a> hexo-deployer-git （0.31）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. <span class="keyword">for</span> npm version under 4</span><br><span class="line">$ npm install git+git@github.com:hexojs/hexo-deployer-git.git --save</span><br><span class="line">2. <span class="keyword">for</span> npm version 5</span><br><span class="line">$ npm install git+ssh://git@github.com:hexojs/hexo-deployer-git.git --save</span><br></pre></td></tr></table></figure></p><p>在项目根目录下的 _config.yml 里面就可以这样配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _config.yaml</span></span><br><span class="line">deploy:</span><br><span class="line">  - <span class="built_in">type</span>: git</span><br><span class="line">    repo: git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git</span><br><span class="line">    branch: master</span><br><span class="line">  - <span class="built_in">type</span>: git</span><br><span class="line">    repo: git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git</span><br><span class="line">    branch: hexo</span><br><span class="line">    extend_dirs: /</span><br><span class="line">    ignore_hidden: <span class="literal">false</span></span><br><span class="line">    ignore_pattern:</span><br><span class="line">        public: .</span><br><span class="line"></span><br><span class="line">来自 张钊</span><br></pre></td></tr></table></figure></p><p>这样，在每次写完博客的时候时候使用 hexo d -g 命令就能将所有其他文件发布到 hexo 分支，换电脑的时候就能通过 git 重新下载下来整个项目，然后本地切换到远端的 hexo 分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master/hexo</span><br></pre></td></tr></table></figure></p><p>就能重新获得所有的源文件，就能重新 hexo d 发布，,对于每一个从 git 下载下来的项目或者主题，最好把每个的 .git 文件夹删掉，否则得通过 submodule 的方式来安装。</p>]]></content>
>>>>>>> 2f1fd311977787f92ac55a3232a8f05aaf360636
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;一、-前言&quot;&gt;&lt;a href=&quot;#一、-前言&quot; class=&quot;headerlink&quot; title=&quot;一、 前言&quot;&gt;&lt;/a&gt;一、 前言&lt;/h1&gt;&lt;p&gt;本博文正文部分转自 crazymilk 并且根据度娘的一些资源作了完善和美化！&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="静态独立博客" scheme="http://yoursite.com/tags/%E9%9D%99%E6%80%81%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="GitHub Page" scheme="http://yoursite.com/tags/GitHub-Page/"/>
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>webpack学习笔记</title>
    <link href="http://yoursite.com/2017/10/18/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/10/18/webpack学习笔记/</id>
    <published>2017-10-18T07:27:18.000Z</published>
<<<<<<< HEAD
    <updated>2017-11-06T07:08:05.296Z</updated>
=======
    <updated>2017-11-10T06:27:54.271Z</updated>
>>>>>>> 2f1fd311977787f92ac55a3232a8f05aaf360636
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="1、webpack-3-8"><a href="#1、webpack-3-8" class="headerlink" title="1、webpack 3.8"></a>1、webpack 3.8</h3><blockquote><p>mock 配置server mock数据 </p></blockquote><a id="more"></a><p>在dev-server.js 下 var app = express() 下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">/*my-mock-server*/</span><br><span class="line">var appData = require(<span class="string">'../db.json'</span>);</span><br><span class="line">// newList API</span><br><span class="line">var newsList =  appData.getNewsList;</span><br><span class="line">// console.log(newsList)</span><br><span class="line">var login =appData.login;</span><br><span class="line">var createOrder =appData.createOrder;</span><br><span class="line">var getOrderList =appData.getOrderList;</span><br><span class="line">var getPrice =appData.getPrice;</span><br><span class="line">var checkOrder =appData.checkOrder;</span><br><span class="line"></span><br><span class="line">var apiRoutes = express.Router();</span><br><span class="line"></span><br><span class="line">apiRoutes.all(<span class="string">'/newsList'</span>,<span class="keyword">function</span>(req,res)&#123;</span><br><span class="line">  res.json(&#123;</span><br><span class="line">    errno:0,</span><br><span class="line">    data:newsList</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">apiRoutes.all(<span class="string">'/login'</span>,<span class="keyword">function</span>(req,res)&#123;</span><br><span class="line">  res.json(&#123;</span><br><span class="line">    errno:0,</span><br><span class="line">    data:login</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">apiRoutes.all(<span class="string">'/createOrder'</span>,<span class="keyword">function</span>(req,res)&#123;</span><br><span class="line">  res.json(&#123;</span><br><span class="line">    errno:0,</span><br><span class="line">    data:createOrder</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">apiRoutes.all(<span class="string">'/getPrice'</span>,<span class="keyword">function</span>(req,res)&#123;</span><br><span class="line">  res.json(&#123;</span><br><span class="line">    errno:0,</span><br><span class="line">    data:getPrice</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">apiRoutes.all(<span class="string">'/getOrderList'</span>,<span class="keyword">function</span>(req,res)&#123;</span><br><span class="line">  res.json(&#123;</span><br><span class="line">    errno:0,</span><br><span class="line">    data:getOrderList</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">apiRoutes.all(<span class="string">'/checkOrder'</span>,<span class="keyword">function</span>(req,res)&#123;</span><br><span class="line">  res.json(&#123;</span><br><span class="line">    errno:0,</span><br><span class="line">    data:checkOrder</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.use(<span class="string">'/api'</span>,apiRoutes);</span><br><span class="line">/*end*/</span><br></pre></td></tr></table></figure></p><h3 id="2、prod-server-js"><a href="#2、prod-server-js" class="headerlink" title="2、prod.server.js"></a>2、prod.server.js</h3><blockquote><p>创建 prod.server.js<br>在根目录下创建 prod.server.js 内容如下：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">/*自定义小型server 在根目录下 element 11章（2）*/</span><br><span class="line"></span><br><span class="line">var express = require(<span class="string">'express'</span>); //导入express</span><br><span class="line">var config = require(<span class="string">'./config/index'</span>); //导入index.js(里面有很多配置)</span><br><span class="line"></span><br><span class="line">var port = process.env.PORT || config.build.port;</span><br><span class="line"></span><br><span class="line">var app = express();//实例化express</span><br><span class="line"></span><br><span class="line">var router = express.Router();//初始化路由</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="keyword">function</span> (req, res, next) &#123;</span><br><span class="line">  req.url = <span class="string">'/index.html'</span>; //这里访问的是发布dist/index.html</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(router);</span><br><span class="line"></span><br><span class="line">var appData = require(<span class="string">'./db.json'</span>);;//读取模拟的数据文件</span><br><span class="line">// 定义接口</span><br><span class="line">/*my-mock-server*/</span><br><span class="line">// newList API</span><br><span class="line">var newsList =  appData.getNewsList;</span><br><span class="line">// console.log(newsList)</span><br><span class="line">var login =appData.login;</span><br><span class="line">var createOrder =appData.createOrder;</span><br><span class="line">var getOrderList =appData.getOrderList;</span><br><span class="line">var getPrice =appData.getPrice;</span><br><span class="line">var checkOrder =appData.checkOrder;</span><br><span class="line"></span><br><span class="line">var apiRoutes = express.Router();</span><br><span class="line"></span><br><span class="line">apiRoutes.all(<span class="string">'/newsList'</span>,<span class="keyword">function</span>(req,res)&#123;</span><br><span class="line">  res.json(&#123;</span><br><span class="line">    errno:0,</span><br><span class="line">    data:newsList</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">apiRoutes.all(<span class="string">'/login'</span>,<span class="keyword">function</span>(req,res)&#123;</span><br><span class="line">  res.json(&#123;</span><br><span class="line">    errno:0,</span><br><span class="line">    data:login</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">apiRoutes.all(<span class="string">'/createOrder'</span>,<span class="keyword">function</span>(req,res)&#123;</span><br><span class="line">  res.json(&#123;</span><br><span class="line">    errno:0,</span><br><span class="line">    data:createOrder</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">apiRoutes.all(<span class="string">'/getPrice'</span>,<span class="keyword">function</span>(req,res)&#123;</span><br><span class="line">  res.json(&#123;</span><br><span class="line">    errno:0,</span><br><span class="line">    data:getPrice</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">apiRoutes.all(<span class="string">'/getOrderList'</span>,<span class="keyword">function</span>(req,res)&#123;</span><br><span class="line">  res.json(&#123;</span><br><span class="line">    errno:0,</span><br><span class="line">    data:getOrderList</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">apiRoutes.all(<span class="string">'/checkOrder'</span>,<span class="keyword">function</span>(req,res)&#123;</span><br><span class="line">  res.json(&#123;</span><br><span class="line">    errno:0,</span><br><span class="line">    data:checkOrder</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.use(<span class="string">'/api'</span>,apiRoutes);</span><br><span class="line">/*end*/</span><br><span class="line"></span><br><span class="line">app.use(express.static(<span class="string">'./dist'</span>));  //使用./dist作为web目录,所以能够找到.dist/index.html</span><br><span class="line"></span><br><span class="line">module.exports = app.listen(port, <span class="keyword">function</span> (err) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    console.log(err);</span><br><span class="line">    <span class="built_in">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(<span class="string">'Listening at http://localhost:'</span> + port + <span class="string">'\n'</span>); // 手动运行node prod.server.js</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>同时 在 config 文件下 index.js  build 对象下添加 port ：9000<br>然后可以 在 cmd 窗口命令下： node prod.server.js  启动测试服务器（9000）</p><h3 id="3、webpack-3-53-从头至尾-自定义玩法-参考"><a href="#3、webpack-3-53-从头至尾-自定义玩法-参考" class="headerlink" title="3、webpack 3.53 从头至尾 自定义玩法 参考"></a>3、webpack 3.53 从头至尾 自定义玩法 <a href="https://segmentfault.com/a/1190000006178770" target="_blank" rel="external">参考</a></h3><p><em>webpack 3.8</em></p><h3 id="正式使用Webpack前的准备和基础配置"><a href="#正式使用Webpack前的准备和基础配置" class="headerlink" title="正式使用Webpack前的准备和基础配置"></a>正式使用Webpack前的准备和基础配置</h3><ol><li><p>Webpack可以使用npm安装，新建一个空的练习文件夹（此处命名为webpack sample project），在终端中转到该文件夹后执行下述指令就可以完成安装。</p></li><li><p>在上述练习文件夹中创建一个package.json文件，这是一个标准的npm说明文件，里面蕴含了丰富的信息，包括当前项目的依赖模块，自定义的脚本任务等等。在终端中使用npm init命令可以自动创建这个package.json文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure></li></ol><p>输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，不过不用担心，如果你不准备在npm中发布你的模块，这些问题的答案都不重要，回车默认即可。</p><ol><li><p>package.json文件已经就绪，我们在本项目中安装Webpack作为依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//全局安装</span><br><span class="line">npm install -g webpack</span><br><span class="line">//安装到你的项目目录</span><br><span class="line">npm install --save-dev webpack</span><br></pre></td></tr></table></figure></li><li><p>回到之前的空文件夹，并在里面创建两个文件夹,app文件夹，app文件夹用来存放原始数据和我们将写的JavaScript模块。</p></li></ol><ul><li>Greeter.js– 放在app文件夹中;</li><li>main.js– 放在app文件夹中;</li></ul><ol><li>通过配置文件来使用Webpack</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  entry:  __dirname + <span class="string">"/app/main.js"</span>,//已多次提及的唯一入口文件</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname + <span class="string">"/public"</span>,//打包后的文件存放的地方</span><br><span class="line">    filename: <span class="string">"bundle.js"</span>//打包后输出文件的文件名</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：“__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录。</p><ol><li>更快捷的执行打包任务 </li></ol></blockquote><pre><code>{  &quot;name&quot;: &quot;webpack-sample-project&quot;,  &quot;version&quot;: &quot;1.0.0&quot;,  &quot;description&quot;: &quot;Sample webpack project&quot;,  &quot;scripts&quot;: {    &quot;start&quot;: &quot;webpack&quot; // 修改的是这里，JSON文件不支持注释，引用时请清除  },  &quot;author&quot;: &quot;zhang&quot;,  &quot;license&quot;: &quot;ISC&quot;,  &quot;devDependencies&quot;: {    &quot;webpack&quot;: &quot;^1.12.9&quot;  }}</code></pre><blockquote><p>注：package.json中的script会安照一定顺序寻找命令对应位置，本地的node_modules/.bin路径就在这个寻找清单中，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。 </p></blockquote><p>现在只需要使用npm start就可以打包文件了，有没有觉得webpack也不过如此嘛，不过不要太小瞧webpack，要充分发挥其强大的功能我们需要修改配置文件的其它选项，一项项来看。 </p><h3 id="Webpack的强大功能"><a href="#Webpack的强大功能" class="headerlink" title="Webpack的强大功能"></a>Webpack的强大功能</h3><h4 id="生成Source-Maps（使调试更容易）"><a href="#生成Source-Maps（使调试更容易）" class="headerlink" title="生成Source Maps（使调试更容易）"></a>生成Source Maps（使调试更容易）</h4><pre><code>module.exports = {  devtool: &apos;eval-source-map&apos;,  entry:  __dirname + &quot;/app/main.js&quot;,  output: {    path: __dirname + &quot;/public&quot;,    filename: &quot;bundle.js&quot;  }} </code></pre><blockquote><p>cheap-module-eval-source-map方法构建速度更快，但是不利于调试，推荐在大型项目考虑时间成本时使用。</p><h4 id="使用webpack构建本地服务器"><a href="#使用webpack构建本地服务器" class="headerlink" title="使用webpack构建本地服务器"></a>使用webpack构建本地服务器</h4><p>把这些命令加到webpack的配置文件中，现在的配置文件webpack.config.js如下所示 </p><ul><li>contentBase : 默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到“public”目录） </li><li>port : 设置默认监听端口，如果省略，默认为”8080“</li><li>inline : 设置为true，当源文件改变时会自动刷新页面</li><li>historyApiFallback : 在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html。</li></ul></blockquote><pre><code>npm install --save-dev webpack-dev-servermodule.exports = {  devtool: &apos;eval-source-map&apos;,  entry:  __dirname + &quot;/app/main.js&quot;,  output: {    path: __dirname + &quot;/public&quot;,    filename: &quot;bundle.js&quot;  },  devServer: {    contentBase: &quot;./public&quot;,//本地服务器所加载的页面所在的目录    historyApiFallback: true,//不跳转    inline: true//实时刷新  } }</code></pre><p>在package.json中的scripts对象中添加如下命令，用以开启本地服务器：</p><pre><code>&quot;scripts&quot;: {  &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,  &quot;start&quot;: &quot;webpack&quot;,  &quot;server&quot;: &quot;webpack-dev-server --open&quot;},</code></pre><p>在终端中输入npm run server即可在本地的8080端口查看结果</p><h4 id="Loaders"><a href="#Loaders" class="headerlink" title="Loaders"></a>Loaders</h4><ul><li>test：一个用以匹配loaders所处理文件的拓展名的正则表达式（必须）</li><li>loader：loader的名称（必须）</li><li>query：为loaders提供额外的设置选项（可选）</li></ul><h4 id="Babel的安装与配置"><a href="#Babel的安装与配置" class="headerlink" title="Babel的安装与配置"></a>Babel的安装与配置</h4><p>Babel其实可以完全在 webpack.config.js 中进行配置，但是考虑到babel具有非常多的配置选项，在单一的webpack.config.js文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 “.babelrc” 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用.babelrc里的babel配置选项），如下：</p><pre><code>// npm一次性安装多个依赖模块，模块之间用空格隔开npm install --save-dev babel-core babel-loader babel-preset-es2015module.exports = {    entry: __dirname + &quot;/app/main.js&quot;,//已多次提及的唯一入口文件    output: {        path: __dirname + &quot;/public&quot;,//打包后的文件存放的地方        filename: &quot;bundle.js&quot;//打包后输出文件的文件名    },    devtool: &apos;eval-source-map&apos;,    devServer: {        contentBase: &quot;./public&quot;,//本地服务器所加载的页面所在的目录        historyApiFallback: true,//不跳转        inline: true//实时刷新    },    module: {        rules: [            {                test: /\.js$/,                use: {                    loader: &quot;babel-loader&quot;                },                exclude: /node_modules/            }        ]    }};//.babelrc{  &quot;presets&quot;: [&quot;es2015&quot;]}</code></pre><p>接下来，在app文件夹里创建一个名字为”main.css”的文件，对一些元素设置样式</p><pre><code>/* main.css */html {  box-sizing: border-box;  -ms-text-size-adjust: 100%;  -webkit-text-size-adjust: 100%;}*, *:before, *:after {  box-sizing: inherit;}body {  margin: 0;  font-family: &apos;Helvetica Neue&apos;, Helvetica, Arial, sans-serif;}h1, h2, h3, h4, h5, h6, p, ul {  margin: 0;  padding: 0;}</code></pre><blockquote><p>通常情况下，css会和js打包到同一个文件中，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件的。</p></blockquote><p>在app文件夹下创建一个Greeter.css文件</p><pre><code>.root {  background-color: #eee;  padding: 10px;  border: 3px solid #ccc;}</code></pre><h4 id="CSS预处理器"><a href="#CSS预处理器" class="headerlink" title="CSS预处理器"></a>CSS预处理器</h4><p>首先安装postcss-loader 和 autoprefixer（自动添加前缀的插件）</p><pre><code>npm install --save-dev postcss-loader autoprefixer</code></pre><p>接下来，在webpack配置文件中添加postcss-loader，在根目录新建postcss.config.js,并添加如下代码之后，重新使用npm start打包时，你写的css会自动根据Can i use里的数据添加不同前缀了。</p><pre><code>// postcss.config.jsmodule.exports = {    plugins: [        require(&apos;autoprefixer&apos;)    ]}</code></pre><h4 id="插件（Plugins）"><a href="#插件（Plugins）" class="headerlink" title="插件（Plugins）"></a>插件（Plugins）</h4><h5 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a>HtmlWebpackPlugin</h5><p>这个插件的作用是依据一个简单的index.html模板，生成一个自动引用你打包后的JS文件的新index.html。这在每次生成的js文件名称不同时非常有用（比如添加了hash值）。</p><pre><code>npm install --save-dev html-webpack-plugin</code></pre><p>在app目录下，创建一个index.tmpl.html文件模板，这个模板包含title等必须元素，在编译过程中，插件会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件，index.tmpl.html中的模板源代码如下</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;utf-8&quot;&gt;    &lt;title&gt;Webpack Sample Project&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;div id=&apos;root&apos;&gt;    &lt;/div&gt;  &lt;/body&gt;&lt;/html</code></pre><p>更新 webpakc 配置文件</p><pre><code>const webpack = require(&apos;webpack&apos;);const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);module.exports = {    entry: __dirname + &quot;/app/main.js&quot;,//已多次提及的唯一入口文件    output: {        path: __dirname + &quot;/build&quot;,        filename: &quot;bundle.js&quot;    },    devtool: &apos;eval-source-map&apos;,    devServer: {        contentBase: &quot;./public&quot;,//本地服务器所加载的页面所在的目录        historyApiFallback: true,//不跳转        inline: true//实时刷新    },    module: {        rules: [            {                test: /(\.jsx|\.js)$/,                use: {                    loader: &quot;babel-loader&quot;                },                exclude: /node_modules/            },            {                test: /\.css$/,                use: [                    {                        loader: &quot;style-loader&quot;                    }, {                        loader: &quot;css-loader&quot;,                        options: {                            modules: true                        }                    }, {                        loader: &quot;postcss-loader&quot;                    }                ]            }        ]    },    plugins: [        new webpack.BannerPlugin(&apos;版权所有，翻版必究&apos;),        new HtmlWebpackPlugin({            template: __dirname + &quot;/app/index.tmpl.html&quot;//new 一个这个插件的实例，并传入相关的参数        })    ],};</code></pre><h3 id="产品阶段的构建和优化插件"><a href="#产品阶段的构建和优化插件" class="headerlink" title="产品阶段的构建和优化插件"></a>产品阶段的构建和优化插件</h3><p>对于复杂的项目来说，需要复杂的配置，这时候分解配置文件为多个小的文件可以使得事情井井有条，以上面的例子来说，我们创建一个webpack.production.config.js的文件，在里面加上基本的配置,它和原始的webpack.config.js很像，如下：</p><ul><li>OccurenceOrderPlugin :为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID</li><li>UglifyJsPlugin：压缩JS代码；</li><li>ExtractTextPlugin：分离CSS和JS文件</li></ul><p>我的目前最终基础版本：</p><pre><code class="bash">//webpack.common.jsconst path = require(<span class="string">'path'</span>);const HtmlWebpackPlugin = require(<span class="string">'html-webpack-plugin'</span>);const CleanWebpackPlugin = require(<span class="string">'clean-webpack-plugin'</span>);const ExtractTextPlugin = require(<span class="string">'extract-text-webpack-plugin'</span>);const webpack = require(<span class="string">'webpack'</span>);const ExtractCSS = new ExtractTextPlugin(<span class="string">'[name].bundle.css'</span>);module.exports = {    entry: {        app: __dirname + <span class="string">"/src/index.js"</span>,        vendor: [<span class="string">'jquery'</span>, <span class="string">'bootstrap/dist/js/bootstrap.js'</span>]    },    output: {        path: path.resolve(__dirname, <span class="string">'dist'</span>)    },    plugins: [        new HtmlWebpackPlugin({            template: __dirname + <span class="string">"/src/index.html"</span> // new 一个插件实例，并传入相关参数        }),        new CleanWebpackPlugin([<span class="string">'dist'</span>]),        ExtractCSS,        new webpack.ProvidePlugin({ // 设置全局变量            $: <span class="string">'jquery'</span>,            jQuery: <span class="string">"jquery"</span>,            <span class="string">'window.$'</span>: <span class="string">'jquery'</span>,            <span class="string">'window.jQuery'</span>: <span class="string">'jquery'</span>        }),        new webpack.optimize.CommonsChunkPlugin({            name: <span class="string">'vendor'</span> // 抽取出共用模块的模块名 将 vendor 入口处的代码放入 vendor 模块        }),        new webpack.optimize.CommonsChunkPlugin({            name: <span class="string">'runtime'</span> // 将 webpack 自身的运行时代码放在 runtime 模块        })    ],    module: {        rules: [            {                <span class="built_in">test</span>: /\.css$/,                use: ExtractCSS.extract([                    {                        loader: <span class="string">'css-loader'</span>,                        options: {                            minimize: <span class="literal">true</span>                        } //css压缩                    },                    <span class="string">'postcss-loader'</span>                ])            },            {                <span class="built_in">test</span>: /\.less$/i,                use: ExtractCSS.extract([<span class="string">'css-loader'</span>, <span class="string">'less-loader'</span>])            },            {                <span class="built_in">test</span>: /\.(png|jpe?g|gif|svg)(\?.*)?$/,                use: {                    loader: <span class="string">'url-loader?limit=8192&amp;name=images/[name].[ext]'</span>,                }            },            { // 增加加载字体的规则                <span class="built_in">test</span>: /\.(woff|woff2|eot|ttf|otf)$/,                use: [                    <span class="string">'file-loader'</span>                ]            }        ]    }    /* externals: {     <span class="string">'jquery'</span>: <span class="string">'window.jQuery'</span> //如果要全局引用jQuery，不管你的jQuery有没有支持模块化，用externals就对了。     }*/}// webpack.div.js 开发版本const path = require(<span class="string">'path'</span>);const webpack = require(<span class="string">'webpack'</span>);const Merge = require(<span class="string">'webpack-merge'</span>);const CommonConfig = require(<span class="string">'./webpack.common.js'</span>);module.exports = Merge(CommonConfig, {    devtool: <span class="string">'cheap-module-eval-source-map'</span>,    devServer: {        contentBase: path.resolve(__dirname, <span class="string">'dist'</span>),        hot: <span class="literal">true</span>,        hotOnly: <span class="literal">true</span>    },    output: {        filename: <span class="string">'[name].bundle.js'</span>    },    plugins: [        new webpack.DefinePlugin({            <span class="string">'process.env.NODE_ENV'</span>: JSON.stringify(<span class="string">'devlopment'</span>) // 在编译的代码里设置了`process.env.NODE_ENV`变量        }),        new webpack.HotModuleReplacementPlugin(),        new webpack.NamedModulesPlugin(), //  打印日志信息时 webpack 默认使用模块的数字 ID 指代模块，不便于 debug，这个插件可以将其替换为模块的真实路径    ]})// webpack.prod.jsconst path = require(<span class="string">'path'</span>);const webpack = require(<span class="string">'webpack'</span>);const Merge = require(<span class="string">'webpack-merge'</span>);const CommonConfig = require(<span class="string">'./webpack.common.js'</span>);module.exports = Merge(CommonConfig,{    devtool: <span class="string">'cheap-module-source-map'</span>,    output: {      //  filename: <span class="string">'[name].[chunkhash:5].js'</span>        filename: <span class="string">'[name].bundle.js'</span>    },    plugins: [        new webpack.DefinePlugin({            <span class="string">'process.env.NODE_ENV'</span>: JSON.stringify(<span class="string">'production'</span>)        }),        new webpack.optimize.UglifyJsPlugin() // JS 压缩    ]})</code></pre><pre><code>//package.json windown7 环境  {    &quot;name&quot;: &quot;webpack-project2&quot;,    &quot;version&quot;: &quot;1.0.0&quot;,    &quot;scripts&quot;: {      &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,      &quot;start&quot;: &quot;webpack-dev-server --open&quot;,      &quot;dev&quot;: &quot;webpack-dev-server --open --config webpack.dev.js&quot;,      &quot;build&quot;: &quot;webpack --progress --config webpack.prod.js&quot;    },    &quot;devDependencies&quot;: {      &quot;autoprefixer&quot;: &quot;^7.1.6&quot;,      &quot;babel-core&quot;: &quot;^6.26.0&quot;,      &quot;babel-loader&quot;: &quot;^7.1.2&quot;,      &quot;babel-preset-env&quot;: &quot;^1.6.1&quot;,      &quot;babel-preset-es2015&quot;: &quot;^6.24.1&quot;,      &quot;bootstrap&quot;: &quot;^3.3.7&quot;,      &quot;clean-webpack-plugin&quot;: &quot;^0.1.17&quot;,      &quot;cross-env&quot;: &quot;^5.1.1&quot;,      &quot;css-loader&quot;: &quot;^0.28.7&quot;,      &quot;extract-text-webpack-plugin&quot;: &quot;^3.0.2&quot;,      &quot;file-loader&quot;: &quot;^1.1.5&quot;,      &quot;html-webpack-plugin&quot;: &quot;^2.30.1&quot;,      &quot;jquery&quot;: &quot;^3.2.1&quot;,      &quot;less&quot;: &quot;^2.7.3&quot;,      &quot;less-loader&quot;: &quot;^4.0.5&quot;,      &quot;postcss-loader&quot;: &quot;^2.0.8&quot;,      &quot;style-loader&quot;: &quot;^0.19.0&quot;,      &quot;url-loader&quot;: &quot;^0.6.2&quot;,      &quot;webpack&quot;: &quot;^3.8.1&quot;,      &quot;webpack-dev-server&quot;: &quot;^2.9.3&quot;,      &quot;webpack-merge&quot;: &quot;^4.1.1&quot;    }  }</code></pre><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><p>webpack可以把一个哈希值添加到打包的文件名中，使用方法如下,添加特殊的字符串混合体（[name], [id] and [hash]）到输出文件名前</p><pre><code>const webpack = require(&apos;webpack&apos;);const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;);module.exports = {..    output: {        path: __dirname + &quot;/build&quot;,        filename: &quot;bundle-[hash].js&quot;    },   ...};</code></pre><p><em>以上转自<a href="https://segmentfault.com/a/1190000006178770" target="_blank" rel="external">https://segmentfault.com/a/1190000006178770</a>部分内容根据 win7 和实际webpack3.8环境略有调整！依然不断完善中ing</em></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、webpack-3-8&quot;&gt;&lt;a href=&quot;#1、webpack-3-8&quot; class=&quot;headerlink&quot; title=&quot;1、webpack 3.8&quot;&gt;&lt;/a&gt;1、webpack 3.8&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;mock 配置server mock数据 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="webpack3.8" scheme="http://yoursite.com/tags/webpack3-8/"/>
    
      <category term="webpack2" scheme="http://yoursite.com/tags/webpack2/"/>
    
  </entry>
  
</feed>
